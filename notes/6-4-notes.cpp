// 一旦一个类的名字出现后，它就是被认为是声明过了的（但尚未定义），因此允许
// 包含指向它自身类型的引用或指针

/**
 * 假设 class A 想要将 class B 中的一个函数 f 当做友元函数，则必须按照
 * 如下顺序设计程序：
 * 1. 首先定义 class B，其中声明函数 f，但切记不能定义它
 * 2. 声明并定义 class A，其中包括对 f 友元函数的声明
 * 3. 最后定义 f，此时 f 中可以使用 class A 的成员
 **/

/**
 * 友元声明friend有个很特殊的特性，就是它的作用仅仅是影响访问权限，它本身
 * 并非普通意义上的声明或定义。意思是如果有一个 friend + 函数声明的语句，
 * 它并不能告诉编译器到哪里去找函数定义（也就是它不能充当一个普通声明的作用）。
 * 类似的，如果是一个 friend + 函数定义的语句，它也不能充当一个普通函数定义
 * 的作用。但有一个例外，如果之后有一个普通声明语句，那么这个friend下的函数定义
 * 就会变得有效（有点编译器因为friend的缘故屏蔽了函数的定义，只有在之后声明了之后
 * 才会解开这个屏蔽）
 **/